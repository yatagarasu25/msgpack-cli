<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010-2014 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

#if UNITY_STANDALONE || UNITY_WEBPLAYER || UNITY_WII || UNITY_IPHONE || UNITY_ANDROID || UNITY_PS3 || UNITY_XBOX360 || UNITY_FLASH || UNITY_BKACKBERRY || UNITY_WINRT
#define UNITY
#endif

using System;
using System.ComponentModel;

namespace MsgPack.Serialization
{
	partial class UnpackHelpers
	{
<#
	var notCls = 
		new HashSet<Type>
		{
			typeof( sbyte ),
			typeof( ushort ),
			typeof( uint ),
			typeof( ulong ),
		};
	foreach ( Type type in
		new []
		{
			typeof( bool ),
			typeof( byte ),
			typeof( short ),
			typeof( int ),
			typeof( long ),
			typeof( sbyte ),
			typeof( ushort ),
			typeof( uint ),
			typeof( ulong ),
			typeof( float ),
			typeof( double )
		}
	)
	{
#>
		/// <summary>
		///		Invokes <see cref="Unpacker.ReadNullable<#= type.Name #>" /> and returns its result.
		/// </summary>
		/// <param name="unpacker">The unpacker to be used.</param>
		/// <param name="objectType">The type of the object which is deserializing now.</param>
		/// <param name="memberName">The name of the member which is deserializing now.</param>
		/// <returns>The unpacked value.</returns>
		/// <exception cref="System.Runtime.Serialization.SerializationException">
		///		Failed to unpack <#= type.Name #> type value from underlying stream.
		/// </exception>
<#
		if ( notCls.Contains( type ) )
		{
#>
#if !UNITY
		[CLSCompliant( false )]
#endif // !UNITY
<#
		}
#>
		[EditorBrowsable( EditorBrowsableState.Never )]
		[System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1062:ValidateArgumentsOfPublicMethods", MessageId = "0", Justification = "Asserted internally" )]
		public static <#= type.Name #> Unpack<#= type.Name #>Value( Unpacker unpacker, Type objectType, String memberName )
		{
			try
			{
				<#= type.Name #> result;
				if ( !unpacker.Read<#= type.Name #>( out result ) )
				{
					throw SerializationExceptions.NewFailedToDeserializeMember( objectType, memberName, null );
				}

				return result;
			}
			catch ( MessageTypeException ex )
			{
				throw SerializationExceptions.NewFailedToDeserializeMember( objectType, memberName, ex );
			}
		}

		/// <summary>
		///		Invokes <see cref="Unpacker.ReadNullable<#= type.Name #>" /> and returns its result.
		/// </summary>
		/// <param name="unpacker">The unpacker to be used.</param>
		/// <param name="objectType">The type of the object which is deserializing now.</param>
		/// <param name="memberName">The name of the member which is deserializing now.</param>
		/// <returns>The unpacked value.</returns>
		/// <exception cref="System.Runtime.Serialization.SerializationException">
		///		Failed to unpack <#= type.Name #> type value from underlying stream.
		/// </exception>
<#
		if ( notCls.Contains( type ) )
		{
#>
#if !UNITY
		[CLSCompliant( false )]
#endif // !UNITY
<#
		}
#>
		[EditorBrowsable( EditorBrowsableState.Never )]
		[System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1062:ValidateArgumentsOfPublicMethods", MessageId = "0", Justification = "Asserted internally" )]
		public static <#= type.Name #>? UnpackNullable<#= type.Name #>Value( Unpacker unpacker, Type objectType, String memberName )
		{
			try
			{
				<#= type.Name #>? result;
				if ( !unpacker.ReadNullable<#= type.Name #>( out result ) )
				{
					throw SerializationExceptions.NewFailedToDeserializeMember( objectType, memberName, null );
				}

				return result;
			}
			catch ( MessageTypeException ex )
			{
				throw SerializationExceptions.NewFailedToDeserializeMember( objectType, memberName, ex );
			}
		}

<#
	}
#>

		/// <summary>
		///		Invokes <see cref="Unpacker.ReadString" /> and returns its result.
		/// </summary>
		/// <param name="unpacker">The unpacker to be used.</param>
		/// <param name="objectType">The type of the object which is deserializing now.</param>
		/// <param name="memberName">The name of the member which is deserializing now.</param>
		/// <returns>The unpacked value.</returns>
		/// <exception cref="System.Runtime.Serialization.SerializationException">
		///		Failed to unpack string type value from underlying stream.
		/// </exception>
		[EditorBrowsable( EditorBrowsableState.Never )]
		[System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1062:ValidateArgumentsOfPublicMethods", MessageId = "0", Justification = "Asserted internally" )]
		public static string UnpackStringValue( Unpacker unpacker, Type objectType, String memberName )
		{
			try
			{
				string result;
				if ( !unpacker.ReadString( out result ) )
				{
					throw SerializationExceptions.NewFailedToDeserializeMember( objectType, memberName, null );
				}

				return result;
			}
			catch ( MessageTypeException ex )
			{
				throw SerializationExceptions.NewFailedToDeserializeMember( objectType, memberName, ex );
			}
		}

		/// <summary>
		///		Invokes <see cref="Unpacker.ReadBinary" /> and returns its result.
		/// </summary>
		/// <param name="unpacker">The unpacker to be used.</param>
		/// <param name="objectType">The type of the object which is deserializing now.</param>
		/// <param name="memberName">The name of the member which is deserializing now.</param>
		/// <returns>The unpacked value.</returns>
		/// <exception cref="System.Runtime.Serialization.SerializationException">
		///		Failed to unpack byte array type value from underlying stream.
		/// </exception>
		[EditorBrowsable( EditorBrowsableState.Never )]
		[System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1062:ValidateArgumentsOfPublicMethods", MessageId = "0", Justification = "Asserted internally" )]
		public static byte[] UnpackBinaryValue( Unpacker unpacker, Type objectType, String memberName )
		{
			try
			{
				byte[] result;
				if ( !unpacker.ReadBinary( out result ) )
				{
					throw SerializationExceptions.NewFailedToDeserializeMember( objectType, memberName, null );
				}

				return result;
			}
			catch ( MessageTypeException ex )
			{
				throw SerializationExceptions.NewFailedToDeserializeMember( objectType, memberName, ex );
			}
		}
	}
}
