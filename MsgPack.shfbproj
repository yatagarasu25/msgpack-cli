<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <PropertyGroup>
    <!-- The configuration and platform will be used to determine which
         assemblies to include from solution and project documentation
         sources -->
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{928e44ef-1824-42ba-b6d2-01363b38ad6c}</ProjectGuid>
    <SHFBSchemaVersion>1.9.5.0</SHFBSchemaVersion>
    <!-- AssemblyName, Name, and RootNamespace are not used by SHFB but Visual
         Studio adds them anyway -->
    <AssemblyName>Documentation</AssemblyName>
    <RootNamespace>Documentation</RootNamespace>
    <Name>Documentation</Name>
    <!-- SHFB properties -->
    <OutputPath>.\Help\</OutputPath>
    <HtmlHelpName>MessagePackCLI</HtmlHelpName>
    <Language>en-US</Language>
    <NamingMethod>MemberName</NamingMethod>
    <Preliminary>False</Preliminary>
    <PresentationStyle>VS2010</PresentationStyle>
    <RootNamespaceContainer>True</RootNamespaceContainer>
    <SdkLinkTarget>Self</SdkLinkTarget>
    <SyntaxFilters>CSharp, VisualBasic, VisualBasicUsage, CPlusPlus, FSharp</SyntaxFilters>
    <ProductTitle>MessagePack for CLI</ProductTitle>
    <VendorName>msgpack_org</VendorName>
    <MissingTags>Summary, Parameter, Returns, Value, AutoDocumentCtors, Namespace, TypeParameter, AutoDocumentDispose</MissingTags>
    <ProjectSummary>MessagePack for CLI is interoperable serialization library for any CLI environments %28C#, VB, F#, etc. on CLR%28.NET%29, Mono, etc.%29.

Site: http://cli.msgpack.org/</ProjectSummary>
    <VisibleItems>Attributes, InheritedMembers, Protected, SealedProtected</VisibleItems>
    <DocumentationSources>
      <DocumentationSource sourceFile="bin\net40-client\MsgPack.dll" xmlns="" />
      <DocumentationSource sourceFile="bin\net40-client\MsgPack.XML" xmlns="" />
    </DocumentationSources>
    <HelpFileFormat>HtmlHelp1, Website</HelpFileFormat>
    <NamespaceSummaries>
      <NamespaceSummaryItem name="MsgPack" isDocumented="True">&lt;para&gt;
&lt;c&gt;MsgPack&lt;/c&gt; namespace defines primitives of MessagePack for CLI.
&lt;/para&gt;
&lt;para&gt;
It includes &lt;see cref="T:MsgPack.MessagePackObject" /&gt; which is lightweight object representing MessagePack type system,
&lt;see cref="T:MsgPack.Packer" /&gt; which is packing primitive, and &lt;see cref="T:MsgPack.Unpacker" /&gt; which is unpacking primitive.
&lt;/para&gt;
&lt;para&gt;
Although you should usually use convinience &lt;see cref="N:MsgPack.Serialization" /&gt; APIs to serialize or deserialize object in MessagePack format,
you can use these primitives to control over serialization depending on internal state of the target object, etc.
&lt;/para&gt;</NamespaceSummaryItem>
      <NamespaceSummaryItem name="MsgPack.Serialization" isDocumented="True">&lt;para&gt;
&lt;c&gt;MsgPack.Serialization&lt;/c&gt; namespace defines primitives of MessagePack for CLI.
&lt;/para&gt;
&lt;para&gt;
It includes a &lt;see cref="T:MsgPack.Serialization.MessagePackSerializer{T}" /&gt; class which is convinient serializer for any serializable object,
and its factory, a &lt;see cref="T:MsgPack.Serialization.MessagePackSerializer" /&gt; static class.
This namespace also includes &lt;see cref="T:MsgPack.Serialization.SerializationContext" /&gt; 
which manages context information including serializer repository and configuration.
&lt;/para&gt;</NamespaceSummaryItem>
    </NamespaceSummaries>
    <HelpTitle>MessagePack for CLI API documentation</HelpTitle>
    <FooterText>&amp;lt%3ba href=&amp;quot%3bhttps://github.com/msgpack/msgpack-cli/issues/&amp;quot%3b&amp;gt%3bFeedback %28github issues%29&amp;lt%3b/a&amp;gt%3b</FooterText>
    <CopyrightText>Copyright %28c%29 FUJIWARA,Yusuke 2010-2014</CopyrightText>
    <FeedbackEMailLinkText>
    </FeedbackEMailLinkText>
    <ContentPlacement>AboveNamespaces</ContentPlacement>
    <BuildAssemblerVerbosity>OnlyWarningsAndErrors</BuildAssemblerVerbosity>
    <IndentHtml>False</IndentHtml>
    <FrameworkVersion>.NET Framework 4.5</FrameworkVersion>
    <KeepLogFile>True</KeepLogFile>
    <DisableCodeBlockComponent>False</DisableCodeBlockComponent>
    <CppCommentsFixup>False</CppCommentsFixup>
    <CleanIntermediates>True</CleanIntermediates>
  </PropertyGroup>
  <!-- There are no properties for these groups.  AnyCPU needs to appear in
       order for Visual Studio to perform the build.  The others are optional
       common platform types that may appear. -->
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x86' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x86' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x64' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x64' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|Win32' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|Win32' ">
  </PropertyGroup>
  <!-- Import the SHFB build targets -->
  <Import Project="$(SHFBROOT)\SandcastleHelpFileBuilder.targets" />
</Project>